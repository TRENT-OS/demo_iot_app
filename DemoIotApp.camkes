/**
 * Main CAmkES configuration file of the IoT demo application.
 *
 * Copyright (C) 2020-2021, HENSOLDT Cyber GmbH
 */

import <std_connector.camkes>;

#include "system_config.h"

import <if_OS_Entropy.camkes>;
import <if_OS_Timer.camkes>;

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    chanMuxStorage, chan,
    nwDriver, data,
    nwDriver, ctrl
)

#include "Storage_ChanMux/Storage_ChanMux.camkes"
Storage_ChanMux_COMPONENT_DEFINE(Storage_ChanMux)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DEFINE(StorageServer)

#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"
//------------------------------------------------------------------------------
// Additional interfaces that the NetworkStack should make use of.
#define NetworkStack_ADDITIONAL_INTERFACES \
    uses      if_OS_Logger  logServer_rpc; \
    dataport  Buf           logServer_port;

//------------------------------------------------------------------------------
// Connect a LogServer to the NetworkStack.
#define NetworkStack_CONNECT_LOGSERVER(_inst_, _inst_log_server_) \
    \
    connection seL4RPCCall conn_##_inst_##_##_inst_log_server_##_rpc( \
        from _inst_.logServer_rpc, \
        to   _inst_log_server_.logServer_rpc); \
    \
    connection seL4SharedData conn_##_inst__##_inst_log_server_##_port( \
        from _inst_.logServer_port, \
        to   _inst_log_server_.nwStack_port);

NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PicoTcp,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_ADDITIONAL_INTERFACES)

// The following two system specific components make use of macros which need to
// be run through the preprocessor. Therefore we need to include them here.
#include "components/CloudConnector/CloudConnector.camkes"
#include "components/NwStackConfigurator/NwStackConfigurator.camkes"

import "components/Sensor/Sensor.camkes";
import "components/LogServer/LogServer.camkes";
import "components/ConfigServer/ConfigServer.camkes";

assembly {
    composition {

        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        ChanMux_UART_INSTANCE_CONNECT(chanMux_UART, uart)

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            nwStack.timeServer_rpc,         nwStack.timeServer_notify,
            cloudConnector.timeServer_rpc,  cloudConnector.timeServer_notify,
            logServer.timeServer_rpc,       logServer.timeServer_notify,
            sensorTemp.timeServer_rpc,      sensorTemp.timeServer_notify
        )

        //----------------------------------------------------------------------
        // ChanMuxStorage
        //----------------------------------------------------------------------
        component Storage_ChanMux chanMuxStorage;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            chanMuxStorage, chan
        )

        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        component StorageServer storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            chanMuxStorage.storage_rpc, chanMuxStorage.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            configServer.storage_rpc,  configServer.storage_port,
            logServer.storage_rpc, logServer.storage_port
        )

        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component ConfigServer configServer;

        connection seL4RPCCall configServer_logServer(
            from configServer.logServer_rpc,
            to   logServer.logServer_rpc);

        connection seL4SharedData configServer_logServer_data(
            from configServer.logServer_port,
            to   logServer.configServer_port);

        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component LogServer logServer;

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component NwDriver nwDriver;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )

        NIC_ChanMux_INSTANCE_CONNECT_OPTIONAL_LOGGER(
            nwDriver,
            logServer.logServer_rpc,
            logServer.nwDriver_port
        )

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component NetworkStack_PicoTcp nwStack;

        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack,
            nwDriver
        )

        NetworkStack_CONNECT_LOGSERVER(nwStack, logServer)

        //----------------------------------------------------------------------
        // Network Stack Configurator
        //----------------------------------------------------------------------
        component NwStackConfigurator nwStackConfigurator;

        NetworkStack_PicoTcp_INSTANCE_CONNECT_CONFIG_CLIENT(
            nwStack,
            nwStackConfigurator, networkStack_PicoTcp_Config
        )

        connection seL4RPCCall nwStackConfigurator_configServer(
            from nwStackConfigurator.OS_ConfigServiceServer,
            to   configServer.OS_ConfigServiceServer);

        connection seL4SharedData nwStackConfigurator_configServer_data(
            from nwStackConfigurator.configServer_port,
            to   configServer.nwStackConfigurator_port);

        //----------------------------------------------------------------------
        // CloudConnector
        //----------------------------------------------------------------------
        component CloudConnector cloudConnector;

        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack,
            cloudConnector, networkStack
        )

        connection seL4RPCCall cloudConnector_configServer(
            from cloudConnector.OS_ConfigServiceServer,
            to   configServer.OS_ConfigServiceServer);

        connection seL4SharedData cloudConnector_configServer_data(
            from cloudConnector.configServer_port,
            to   configServer.cloudConnector_port);

        connection seL4RPCCall cloudConnector_logServer(
            from cloudConnector.logServer_rpc,
            to   logServer.logServer_rpc);

        connection seL4SharedData cloudConnector_logServer_data(
            from cloudConnector.logServer_port,
            to   logServer.cloudConnector_port);

        //----------------------------------------------------------------------
        // EntropySource
        //----------------------------------------------------------------------
        component EntropySource entropySource;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource,
            cloudConnector.entropy_rpc,
            cloudConnector.entropy_port)

        //----------------------------------------------------------------------
        // SensorTemp
        //----------------------------------------------------------------------
        component SensorTemp sensorTemp;

        connection seL4SharedData cloudConnectorData_sensorTemp_data(
            from sensorTemp.cloudConnector_port,
            to   cloudConnector.sensor_port);

        connection seL4RPCCall cloudConnector_sensorTemp(
            from sensorTemp.cloudConnector_rpc,
            to   cloudConnector.cloudConnector_rpc);

        connection seL4RPCCall sensorTemp_configServer(
            from sensorTemp.OS_ConfigServiceServer,
            to   configServer.OS_ConfigServiceServer);

        connection seL4SharedData sensorTemp_configServer_data(
            from sensorTemp.configServer_port,
            to   configServer.sensor_port);

        connection seL4RPCCall sensorTemp_logServer(
            from sensorTemp.logServer_rpc,
            to   logServer.logServer_rpc);

        connection seL4SharedData sensorTemp_logServer_data(
            from sensorTemp.logServer_port,
            to   logServer.sensor_port);

    }
    configuration {
        // Client IDs
        configServer.logServer_rpc_attributes =   CONFIGSERVER_LOGGER_ID;
        cloudConnector.logServer_rpc_attributes = CLOUDCONNECTOR_LOGGER_ID;
        sensorTemp.logServer_rpc_attributes =     SENSOR_LOGGER_ID;
        nwDriver.logServer_rpc_attributes =       NWDRIVER_LOGGER_ID;
        nwStack.logServer_rpc_attributes =        NWSTACK_LOGGER_ID;

        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc,
            chanMuxStorage.chanMux_Rpc
        )

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            CONFIGSERVER_STORAGE_OFFSET, CONFIGSERVER_STORAGE_SIZE,
            LOGSERVER_STORAGE_OFFSET,    LOGSERVER_STORAGE_SIZE
        )
        StorageServer_CLIENT_ASSIGN_BADGES(
            configServer.storage_rpc,
            logServer.storage_rpc
        )

        TimeServer_CLIENT_ASSIGN_BADGES(
            nwStack.timeServer_rpc,
            cloudConnector.timeServer_rpc,
            logServer.timeServer_rpc,
            sensorTemp.timeServer_rpc
        )

        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            cloudConnector, networkStack
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack,
            1
        )

        // Assign an initial value to the semaphore.
        cloudConnector.sem_value = 0;
    }
}

