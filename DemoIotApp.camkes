/**
 * Main CAmkES configuration file of the IoT demo application.
 *
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;
import <if_OS_Timer.camkes>;

import "components/Sensor/Sensor.camkes";
import "components/CloudConnector/CloudConnector.camkes";
import "components/LogServer/LogServer.camkes";
import "components/NwStack/network_stack.camkes";
import "components/Ticker/Ticker.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "ChanMux/ChanMux.camkes"
ChanMux_DEFINE_COMPONENT(ChanMux,
        chanMuxStorage, chan,
        nwDriver, data,
        nwDriver, ctrl)

#include "ChanMux_Storage/ChanMux_Storage.camkes"

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DECLARE(TimeServer)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DECLARE(StorageServer)

assembly {
    composition {

        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component  LogServer        logServer;


        //----------------------------------------------------------------------
        // SensorTemp
        //----------------------------------------------------------------------
        component  SensorTemp       sensorTemp;

        connection seL4SharedData   cloudConnectorData_sensorTempData   (from sensorTemp.cloudConnectorDataPort, to cloudConnector.sensor_dp);
        connection seL4RPCCall      cloudConnector_sensorTemp           (from sensorTemp.cloudConnector_rpc,     to cloudConnector.cloudConnector_rpc);

        connection seL4RPCCall      sensorTemp_configServer             (from sensorTemp.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData   sensorTemp_configServer_data        (from sensorTemp.configServer_dp,        to configServer.sensorTemp_dp);

        connection seL4RPCCall      sensorTemp_logServer                (from sensorTemp.logServer_rpc, to logServer.logServer_rpc);
        connection seL4SharedData   sensorTemp_logServer_data           (from sensorTemp.logServer_dp,  to logServer.sensorTemp_dp);


        //----------------------------------------------------------------------
        // CloudConnector
        //----------------------------------------------------------------------
        component  CloudConnector       cloudConnector;

        connection seL4Notification     NwAppInitDone                    (from nwStack.event_network_init_done, to cloudConnector.event_network_stack_init_done);
        connection seL4RPCCall          cloudConnector_nwStack           (from cloudConnector.network_stack_rpc, to nwStack.network_stack_rpc);
        connection seL4SharedData       NwApp_dataConnection             (from cloudConnector.nwStack_dp,        to nwStack.port_app_io);

        connection seL4RPCCall          cloudConnector_configServer      (from cloudConnector.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData       cloudConnector_configServer_data (from cloudConnector.configServer_dp,        to configServer.cloudConnector_dp);

        connection seL4RPCCall          cloudConnector_logServer         (from cloudConnector.logServer_rpc, to logServer.logServer_rpc);
        connection seL4SharedData       cloudConnector_logServer_data    (from cloudConnector.logServer_dp,  to logServer.cloudConnector_dp);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource,
            cloudConnector.entropy_rpc,
            cloudConnector.entropy_port)

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver         nwDriver;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver, ctrl)

        connection seL4RPCCall      NwDriver_logServer               (from nwDriver.logServer_rpc,  to logServer.logServer_rpc);
        connection seL4SharedData   NwDriver_logServer_data          (from nwDriver.logServer_port, to logServer.nwDriver_dp);


        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                nwStack;

        connection seL4NotificationNative NwStackdataAvail2                (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1                (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification       NwStackEventsRxd2                (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification       NwStackEventsRxd3                (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver.nic_event_hasData, to nwStack.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack.nic_driver,         to nwDriver.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,       to nwStack.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,     to nwStack.port_nic_to);

        connection seL4RPCCall            NwStack_configuration_server     (from nwStack.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_config_data              (from nwStack.configServer_dp,        to configServer.nwStack_dp);

        connection seL4RPCCall            NwStack_logServer                (from nwStack.logServer_rpc, to logServer.logServer_rpc);
        connection seL4SharedData         NwStack_logServer_data           (from nwStack.logServer_dp, to logServer.nwStack_dp);


        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART(ChanMux, chanMux)


        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker;
        connection seL4NotificationNative nwStack_tick (from ticker.e_timeout_nwstacktick, to nwStack.event_tick_or_data);


        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc,          ticker.timeServer_notify,
            nwStack.timeServer_rpc,         nwStack.timeServer_notify,
            cloudConnector.timeServer_rpc,  cloudConnector.timeServer_notify,
            logServer.timeServer_rpc,       logServer.timeServer_notify,
            sensorTemp.timeServer_rpc,      sensorTemp.timeServer_notify
        )


        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;

        connection  seL4RPCCall      configServer_logServer            (from configServer.logServer_rpc, to logServer.logServer_rpc);
        connection  seL4SharedData   configServer_logServer_data       (from configServer.logServer_dp,  to logServer.configServer_dp);


        //----------------------------------------------------------------------
        // ChanMuxStorage
        //----------------------------------------------------------------------
        component   ChanMux_Storage     chanMuxStorage;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, chanMuxStorage)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, chanMuxStorage, chan)

        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        component   StorageServer       storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            chanMuxStorage.storage_rpc, chanMuxStorage.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            configServer.storage_rpc,  configServer.storage_dp,
            logServer.storage_rpc, logServer.storage_dp
        )
    }
    configuration {
        /* client id's */
        configServer.logServer_rpc_attributes =       CONFIGSERVER_LOGGER_ID;
        cloudConnector.logServer_rpc_attributes =     CLOUDCONNECTOR_LOGGER_ID;
        sensorTemp.logServer_rpc_attributes =         SENSOR_LOGGER_ID;
        nwDriver.logServer_rpc_attributes =           NWDRIVER_LOGGER_ID;
        nwStack.logServer_rpc_attributes =            NWSTACK_LOGGER_ID;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver, CHANMUX_ID_NIC)
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, chanMuxStorage, CHANMUX_ID_STORAGE)

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            CONFIGSERVER_STORAGE_OFFSET, CONFIGSERVER_STORAGE_SIZE,
            LOGSERVER_STORAGE_OFFSET,    LOGSERVER_STORAGE_SIZE
        )
        StorageServer_CLIENT_ASSIGN_BADGES(
            configServer.storage_rpc,
            logServer.storage_rpc
        )

        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc,
            cloudConnector.timeServer_rpc,
            logServer.timeServer_rpc,
            sensorTemp.timeServer_rpc
        )

        /* assign an initial value to semaphore */
        cloudConnector.sem_value = 0;
    }
}

